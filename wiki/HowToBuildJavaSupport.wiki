= Building javasupport Project =

  # Install JDK1.5+
  # Install Maven2+
  # Install Svn Client
  # Open your terminal and perform the following:

{{{
svn checkout http://javasupport.googlecode.com/svn/trunk/ javasupport-read-only
cd javasupport-read-only
mvn install
}}}

If you see SUCCESSFUL message, you will also have a copy of jars under {{{tagets}}} directory.

= Remote Repsository and Proxies =
Maven based project defaults to http://repo1.maven.org/maven2/ as Central Remote Repository.

The javasupport project itself defaults to a custom public available repository at http://faxintelligence.com:8082/archiva, which provided by courtesy of my employer.

This repository may be setup by yourself as internal Remote Repository(or sometimes called proxied). If you are to create your project, I HIGHLY ENCOURAGE YOU TO SETUP YOUR OWN REMOTE REPOSITORY! EVEN IF YOU WERE TO HOST IT LOCALLY, IT'S STILL WORTH DOING! IT'S EASIER THAT YOU THINK.

Note that all project generated by javasupport's maven archetype will point to our repo as default. You would want to change this once you setup your own.

== Setup Your Own Internal Maven2 Repo ==
  # Install Archiva from http://maven.apache.org/archiva (use the standalone version Afthe first time, it's easier)
  # After you have Archiva running, open broswer to http://losthost:8080/archiva
  # Login as Admin user and click on Repository menu
  # Add two new Managed Repositories (mkdir if doesn't exists):
    # 1) A release repo points to /data/repositories/internal
    # 2) A snapshot repo points to /data/repositories/snapshots
  # Add Remote Repsitories in addition to what's already there:
    # 1) jobss: http://repository.jboss.org/maven2
    # 1) javanet: http://download.java.net/maven/2
  # Now got to Proxis Connector, under internal create All the new repository you just added.

Now you have your internal repo ready. You may tell javasupport project to uses your repo in two ways:

method 1) 
Create a ${HOME}/.m2/settings.xml file that have the mirror elment
{{{
<?xml version="1.0"?>
<settings>
	<mirrors>
		<mirror>
		<id>central</id>
		<mirrorOf>central</mirrorOf>
		<url>http://losthost:8080/archiva/repository/internal</url>
		</mirror>
	</mirrors>

        <!-- this section is needed when you deploy into your own repo -->
        <servers>	
		<server>
			<id>localhost</id>
			<username>admin</username>
			<password>secretpass</password>
		</server>
	</servers>
</settings>
}}}
Assuming http://losthost:8080 is where you setup yoru Archiva.

NOTE: There is a sample at maven-support/bin/settings.xml.sample

method 2) 
Just edit javasupport/pom.xml and replace our repo url to your host and port version.


== Why Setup your Own Remote Repository ==
  * Well, for one thing you need to release your own project artifacts like jar or war files, this is where you upload to.
  * For a more reliable network download for dependencies.
  * For faster build!


= Why Use Maven2 =
I used to use Ant tool to build all my java projects. As I progess to manage and handle more projects in my company at work, the building, release and organizing of projects just got too crazy. So I started looking into Maven2. Yes I do have many problems at first in learning it, but eventually I got it to build all my projects in a very consistent manner. I think Maven is a great tool, just like Ant, and best of all, I sometimes can make both of them work together! So if you are an Ant user, and had bad day with Maven before, don't get upset. See how this JavaSupport uses it and you might be change your mind too.